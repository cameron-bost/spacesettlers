package spacesettlers.bost7517;

import java.util.Set;

import com.thoughtworks.xstream.annotations.XStreamOmitField;

import spacesettlers.objects.AbstractObject;
import spacesettlers.objects.Asteroid;
import spacesettlers.objects.Base;
import spacesettlers.objects.Ship;
import spacesettlers.simulator.Toroidal2DPhysics;

/**
 * Heavily inspired by clients.examples.ExampleGAState.
 *  
 * @author Joshua Atkinson, Cameron Bost
 * @version 0.3
 *
 */
public class AtkiGAState {
	
	private double distanceToNearestMineableAsteroid;
	@XStreamOmitField
	private Asteroid nearestMineableAsteroid;
	@XStreamOmitField
	private AbstractObject energyTarget;
	@XStreamOmitField
	private Base base;
	
	public AtkiGAState(Toroidal2DPhysics space, Ship myShip) 
	{
		updateState(space, myShip);
	}
	
	/**
	 * Update the distance to the nearest mineable asteroid,energy target
	 * 
	 * @param space Physics model for game.
	 * @param myShip Ship of concern.
	 */
	public void updateState(Toroidal2DPhysics space, Ship myShip) {
		Set<Asteroid> asteroids = space.getAsteroids();
		distanceToNearestMineableAsteroid = Integer.MAX_VALUE;
		double distance;

		for (Asteroid asteroid : asteroids) {
			if (asteroid.isMineable()) {
				distance = space.findShortestDistance(myShip.getPosition(), asteroid.getPosition());
				if (distance < distanceToNearestMineableAsteroid) {
					distanceToNearestMineableAsteroid = distance;
					nearestMineableAsteroid = asteroid;
				}
			}
		}
		
		energyTarget = AgentUtils.findNearestEnergySource(space, myShip);
		
		base = AgentUtils.findNearestBase(space, myShip);
		
	}

	/**
	 * Return Energy Target
	 * @return
	 */
	public AbstractObject getBase() {
		return base;
	}
	
	/**
	 * Return Energy Target
	 * @return
	 */
	public AbstractObject getEnergySource() {
		return energyTarget;
	}
	
	/**
	 * Return the nearest asteroid (used for actions)
	 * 
	 * @return
	 */
	public Asteroid getNearestMineableAsteroid() {
		return nearestMineableAsteroid;
	}


	/**
	 * Generated by eclipse - make sure you update this when you update the state (just use eclipse to regenerate it)
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		long temp;
		temp = Double.doubleToLongBits(distanceToNearestMineableAsteroid);
		result = prime * result + (int) (temp ^ (temp >>> 32));
		return result;
	}


	/**
	 * Generated by eclipse - make sure you update this when you update the state (just use eclipse to regenerate it)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		AtkiGAState other = (AtkiGAState) obj;
		if (Double.doubleToLongBits(distanceToNearestMineableAsteroid) != Double
				.doubleToLongBits(other.distanceToNearestMineableAsteroid))
			return false;
		return true;
	}
	/**
	 * Will re-determine the asteroid based on the optimalDistance Variable.
	 * @param optimalDistance
	 * @param space
	 * @param myShip
	 */
	public void changeDistance(int optimalDistance,Toroidal2DPhysics space,Ship myShip) 
	{
		int bestMoney = Integer.MIN_VALUE;
		Set<Asteroid> asteroids = space.getAsteroids();
		distanceToNearestMineableAsteroid = optimalDistance;
		double distance;

		for (Asteroid asteroid : asteroids) {
			if (asteroid.isMineable()) {
				if (asteroid.isMineable() && asteroid.getResources().getTotal() > bestMoney) {
					distance = space.findShortestDistance(myShip.getPosition(), asteroid.getPosition());
					if (distance < distanceToNearestMineableAsteroid) 
					{
						bestMoney = asteroid.getResources().getTotal();
						distanceToNearestMineableAsteroid = distance;
						nearestMineableAsteroid = asteroid;
					}
				}
			}
		}
	}



}
